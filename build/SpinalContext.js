"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AbstractElement = require("./AbstractElement");

var _AbstractElement2 = _interopRequireDefault(_AbstractElement);

var _SpinalNode = require("./SpinalNode");

var _SpinalNode2 = _interopRequireDefault(_SpinalNode);

var _Utilities = require("./Utilities");

var _SpinalApplication = require("./SpinalApplication");

var _SpinalApplication2 = _interopRequireDefault(_SpinalApplication);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;


let getViewer = function () {
  return globalType.v;
};

/**
 *
 *
 * @class SpinalContext
 * @extends {SpinalApplication}
 */

class SpinalContext extends _SpinalApplication2.default {
  /**
   *Creates an instance of SpinalContext.
   * @param {string} name
   * @param {string[]} relationsTypesLst
   * @param {Object[]} models
   * @param {Model} [interactions= new Model()]
   * @param {SpinaNode} [startingNode = new AbstractElement(name, "root")]
   * @param {SpinalGraph} relatedGraph
   * @param {string} [name="SpinalContext"]
   * @memberof SpinalContext
   */
  constructor(_name, relationsTypesLst, models, interactions = new globalType.Model(), startingNode = new _AbstractElement2.default(_name, "root"), relatedGraph, name = "SpinalContext") {
    super(_name, relationsTypesLst, relatedGraph);
    if (FileSystem._sig_server) {
      let rootNode = relatedGraph.addNode(startingNode);

      this.add_attr({
        models: models,
        startingNode: rootNode,
        interactions: interactions,
        contextImage: new Lst()
      });
    }
  }
}
exports.default = SpinalContext;

spinalCore.register_models([SpinalContext]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TcGluYWxDb250ZXh0LmpzIl0sIm5hbWVzIjpbInNwaW5hbENvcmUiLCJyZXF1aXJlIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsImdldFZpZXdlciIsInYiLCJTcGluYWxDb250ZXh0IiwiU3BpbmFsQXBwbGljYXRpb24iLCJjb25zdHJ1Y3RvciIsIl9uYW1lIiwicmVsYXRpb25zVHlwZXNMc3QiLCJtb2RlbHMiLCJpbnRlcmFjdGlvbnMiLCJNb2RlbCIsInN0YXJ0aW5nTm9kZSIsIkFic3RyYWN0RWxlbWVudCIsInJlbGF0ZWRHcmFwaCIsIm5hbWUiLCJGaWxlU3lzdGVtIiwiX3NpZ19zZXJ2ZXIiLCJyb290Tm9kZSIsImFkZE5vZGUiLCJhZGRfYXR0ciIsImNvbnRleHRJbWFnZSIsIkxzdCIsInJlZ2lzdGVyX21vZGVscyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQU1BOztBQUVBOzs7Ozs7QUFYQSxNQUFNQSxhQUFhQyxRQUFRLHlCQUFSLENBQW5CO0FBQ0EsTUFBTUMsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7OztBQUlBLElBQUlFLFlBQVksWUFBVztBQUN6QixTQUFPSCxXQUFXSSxDQUFsQjtBQUNELENBRkQ7O0FBUUE7Ozs7Ozs7QUFPQSxNQUFNQyxhQUFOLFNBQTRCQywyQkFBNUIsQ0FBOEM7QUFDNUM7Ozs7Ozs7Ozs7O0FBV0FDLGNBQ0VDLEtBREYsRUFFRUMsaUJBRkYsRUFHRUMsTUFIRixFQUlFQyxlQUFlLElBQUlYLFdBQVdZLEtBQWYsRUFKakIsRUFLRUMsZUFBZSxJQUFJQyx5QkFBSixDQUFvQk4sS0FBcEIsRUFBMkIsTUFBM0IsQ0FMakIsRUFNRU8sWUFORixFQU9FQyxPQUFPLGVBUFQsRUFRRTtBQUNBLFVBQU1SLEtBQU4sRUFBYUMsaUJBQWIsRUFBZ0NNLFlBQWhDO0FBQ0EsUUFBSUUsV0FBV0MsV0FBZixFQUE0QjtBQUMxQixVQUFJQyxXQUFXSixhQUFhSyxPQUFiLENBQXFCUCxZQUFyQixDQUFmOztBQUVBLFdBQUtRLFFBQUwsQ0FBYztBQUNaWCxnQkFBUUEsTUFESTtBQUVaRyxzQkFBY00sUUFGRjtBQUdaUixzQkFBY0EsWUFIRjtBQUlaVyxzQkFBYyxJQUFJQyxHQUFKO0FBSkYsT0FBZDtBQU1EO0FBQ0Y7QUFoQzJDO2tCQWtDL0JsQixhOztBQUNmUCxXQUFXMEIsZUFBWCxDQUEyQixDQUFDbkIsYUFBRCxDQUEzQiIsImZpbGUiOiJTcGluYWxDb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BpbmFsQ29yZSA9IHJlcXVpcmUoXCJzcGluYWwtY29yZS1jb25uZWN0b3Jqc1wiKTtcbmNvbnN0IGdsb2JhbFR5cGUgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogd2luZG93O1xuaW1wb3J0IEFic3RyYWN0RWxlbWVudCBmcm9tIFwiLi9BYnN0cmFjdEVsZW1lbnRcIjtcbmltcG9ydCBTcGluYWxOb2RlIGZyb20gXCIuL1NwaW5hbE5vZGVcIjtcblxubGV0IGdldFZpZXdlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsVHlwZS52O1xufTtcblxuaW1wb3J0IHsgVXRpbGl0aWVzIH0gZnJvbSBcIi4vVXRpbGl0aWVzXCI7XG5cbmltcG9ydCBTcGluYWxBcHBsaWNhdGlvbiBmcm9tIFwiLi9TcGluYWxBcHBsaWNhdGlvblwiO1xuXG4vKipcbiAqXG4gKlxuICogQGNsYXNzIFNwaW5hbENvbnRleHRcbiAqIEBleHRlbmRzIHtTcGluYWxBcHBsaWNhdGlvbn1cbiAqL1xuXG5jbGFzcyBTcGluYWxDb250ZXh0IGV4dGVuZHMgU3BpbmFsQXBwbGljYXRpb24ge1xuICAvKipcbiAgICpDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFNwaW5hbENvbnRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHJlbGF0aW9uc1R5cGVzTHN0XG4gICAqIEBwYXJhbSB7T2JqZWN0W119IG1vZGVsc1xuICAgKiBAcGFyYW0ge01vZGVsfSBbaW50ZXJhY3Rpb25zPSBuZXcgTW9kZWwoKV1cbiAgICogQHBhcmFtIHtTcGluYU5vZGV9IFtzdGFydGluZ05vZGUgPSBuZXcgQWJzdHJhY3RFbGVtZW50KG5hbWUsIFwicm9vdFwiKV1cbiAgICogQHBhcmFtIHtTcGluYWxHcmFwaH0gcmVsYXRlZEdyYXBoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1cIlNwaW5hbENvbnRleHRcIl1cbiAgICogQG1lbWJlcm9mIFNwaW5hbENvbnRleHRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIF9uYW1lLFxuICAgIHJlbGF0aW9uc1R5cGVzTHN0LFxuICAgIG1vZGVscyxcbiAgICBpbnRlcmFjdGlvbnMgPSBuZXcgZ2xvYmFsVHlwZS5Nb2RlbCgpLFxuICAgIHN0YXJ0aW5nTm9kZSA9IG5ldyBBYnN0cmFjdEVsZW1lbnQoX25hbWUsIFwicm9vdFwiKSxcbiAgICByZWxhdGVkR3JhcGgsXG4gICAgbmFtZSA9IFwiU3BpbmFsQ29udGV4dFwiXG4gICkge1xuICAgIHN1cGVyKF9uYW1lLCByZWxhdGlvbnNUeXBlc0xzdCwgcmVsYXRlZEdyYXBoKTtcbiAgICBpZiAoRmlsZVN5c3RlbS5fc2lnX3NlcnZlcikge1xuICAgICAgbGV0IHJvb3ROb2RlID0gcmVsYXRlZEdyYXBoLmFkZE5vZGUoc3RhcnRpbmdOb2RlKTtcblxuICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgIG1vZGVsczogbW9kZWxzLFxuICAgICAgICBzdGFydGluZ05vZGU6IHJvb3ROb2RlLFxuICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgY29udGV4dEltYWdlOiBuZXcgTHN0KClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgU3BpbmFsQ29udGV4dDtcbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtTcGluYWxDb250ZXh0XSk7XG4iXX0=