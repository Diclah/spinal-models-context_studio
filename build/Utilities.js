"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
let Utilities = {};
const globalType = typeof window === "undefined" ? global : window;

Utilities.getViewer = function () {
  return globalType.v;
};

Utilities.promiseGetProperties = function (_dbId) {
  return new Promise(resolve => {
    let viewer = Utilities.getViewer();
    viewer.getProperties(_dbId, resolve);
  });
};

Utilities.promiseGetExternalIdMapping = function (_externalId) {
  return new Promise(resolve => {
    let viewer = Utilities.getViewer();
    viewer.model.getExternalIdMapping(res => {
      resolve(res[_externalId]);
    });
  });
};

Utilities.promiseLoad = function (_ptr) {
  return new Promise(resolve => {
    _ptr.load(resolve);
  });
};

Utilities.getExternalId = async function (_dbId) {
  let properties = await Utilities.promiseGetProperties(_dbId);
  return properties.externalId;
};

Utilities.getDbIdByExternalId = async function (_externalId) {
  let dbid = await Utilities.promiseGetExternalIdMapping(_externalId);
  return dbid;
};

Utilities.arraysEqual = function (arrayA, arrayB) {
  if (arrayA === arrayB) return true;
  if (arrayA == null || arrayB == null) return false;
  if (arrayA.length != arrayB.length) return false;
  arrayA.sort();
  console.log(arrayA);

  arrayB.sort();
  for (var i = 0; i < arrayA.length; ++i) {
    if (arrayA[i] !== arrayB[i]) return false;
  }
  return true;
};

Utilities.contains = function (_list, _vertex) {
  for (let index = 0; index < _list.length; index++) {
    const element = _list[index];
    if (element.id.get() == _vertex.id.get()) return true;
  }
  return false;
};

Utilities.include = function (arr, obj) {
  return arr.indexOf(obj) != -1;
};

Utilities.getIndex = function (arr, obj) {
  return arr.indexOf(obj);
};

Utilities.getIds = function (array) {
  let res = [];
  for (let index = 0; index < array.length; index++) {
    res.push(array[index].id.get());
  }
  return res;
};
// Utilities.addNotExisting = function(arr, obj) {
//   return (arr.indexOf(obj));
// }


exports.Utilities = Utilities;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9VdGlsaXRpZXMuanMiXSwibmFtZXMiOlsiVXRpbGl0aWVzIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsImdldFZpZXdlciIsInYiLCJwcm9taXNlR2V0UHJvcGVydGllcyIsIl9kYklkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2aWV3ZXIiLCJnZXRQcm9wZXJ0aWVzIiwicHJvbWlzZUdldEV4dGVybmFsSWRNYXBwaW5nIiwiX2V4dGVybmFsSWQiLCJtb2RlbCIsImdldEV4dGVybmFsSWRNYXBwaW5nIiwicmVzIiwicHJvbWlzZUxvYWQiLCJfcHRyIiwibG9hZCIsImdldEV4dGVybmFsSWQiLCJwcm9wZXJ0aWVzIiwiZXh0ZXJuYWxJZCIsImdldERiSWRCeUV4dGVybmFsSWQiLCJkYmlkIiwiYXJyYXlzRXF1YWwiLCJhcnJheUEiLCJhcnJheUIiLCJsZW5ndGgiLCJzb3J0IiwiY29uc29sZSIsImxvZyIsImkiLCJjb250YWlucyIsIl9saXN0IiwiX3ZlcnRleCIsImluZGV4IiwiZWxlbWVudCIsImlkIiwiZ2V0IiwiaW5jbHVkZSIsImFyciIsIm9iaiIsImluZGV4T2YiLCJnZXRJbmRleCIsImdldElkcyIsImFycmF5IiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxZQUFZLEVBQWhCO0FBQ0EsTUFBTUMsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7O0FBRUFGLFVBQVVJLFNBQVYsR0FBc0IsWUFBVztBQUMvQixTQUFPSCxXQUFXSSxDQUFsQjtBQUNELENBRkQ7O0FBSUFMLFVBQVVNLG9CQUFWLEdBQWlDLFVBQVNDLEtBQVQsRUFBZ0I7QUFDL0MsU0FBTyxJQUFJQyxPQUFKLENBQVlDLFdBQVc7QUFDNUIsUUFBSUMsU0FBU1YsVUFBVUksU0FBVixFQUFiO0FBQ0FNLFdBQU9DLGFBQVAsQ0FBcUJKLEtBQXJCLEVBQTRCRSxPQUE1QjtBQUNELEdBSE0sQ0FBUDtB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RWhCLFMsR0FBQUEsUyIsImZpbGUiOiJVdGlsaXRpZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgVXRpbGl0aWVzID0ge31cbmNvbnN0IGdsb2JhbFR5cGUgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogd2luZG93O1xuXG5VdGlsaXRpZXMuZ2V0Vmlld2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxUeXBlLnY7XG59O1xuXG5VdGlsaXRpZXMucHJvbWlzZUdldFByb3BlcnRpZXMgPSBmdW5jdGlvbihfZGJJZCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgbGV0IHZpZXdlciA9IFV0aWxpdGllcy5nZXRWaWV3ZXIoKVxuICAgIHZpZXdlci5nZXRQcm9wZXJ0aWVzKF9kYklkLCByZXNvbHZlKTtcbiAgfSk7XG59XG5cblV0aWxpdGllcy5wcm9taXNlR2V0RXh0ZXJuYWxJZE1hcHBpbmcgPSBmdW5jdGlvbihfZXh0ZXJuYWxJZCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgbGV0IHZpZXdlciA9IFV0aWxpdGllcy5nZXRWaWV3ZXIoKVxuICAgIHZpZXdlci5tb2RlbC5nZXRFeHRlcm5hbElkTWFwcGluZyhyZXMgPT4ge1xuICAgICAgcmVzb2x2ZShyZXNbX2V4dGVybmFsSWRdKVxuICAgIH0pO1xuICB9KTtcbn1cblxuVXRpbGl0aWVzLnByb21pc2VMb2FkID0gZnVuY3Rpb24oX3B0cikge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgX3B0ci5sb2FkKHJlc29sdmUpO1xuICB9KTtcbn1cblxuXG5cblxuVXRpbGl0aWVzLmdldEV4dGVybmFsSWQgPSBhc3luYyBmdW5jdGlvbihfZGJJZCkge1xuICBsZXQgcHJvcGVydGllcyA9IGF3YWl0IFV0aWxpdGllcy5wcm9taXNlR2V0UHJvcGVydGllcyhfZGJJZCk7XG4gIHJldHVybiBwcm9wZXJ0aWVzLmV4dGVybmFsSWQ7XG59XG5cblV0aWxpdGllcy5nZXREYklkQnlFeHRlcm5hbElkID0gYXN5bmMgZnVuY3Rpb24oX2V4dGVybmFsSWQpIHtcbiAgbGV0IGRiaWQgPSBhd2FpdCBVdGlsaXRpZXMucHJvbWlzZUdldEV4dGVybmFsSWRNYXBwaW5nKF9leHRlcm5hbElkKTtcbiAgcmV0dXJuIGRiaWQ7XG59XG5cblV0aWxpdGllcy5hcnJheXNFcXVhbCA9IGZ1bmN0aW9uKGFycmF5QSwgYXJyYXlCKSB7XG4gIGlmIChhcnJheUEgPT09IGFycmF5QikgcmV0dXJuIHRydWU7XG4gIGlmIChhcnJheUEgPT0gbnVsbCB8fCBhcnJheUIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoYXJyYXlBLmxlbmd0aCAhPSBhcnJheUIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIGFycmF5QS5zb3J0KCk7XG4gIGNvbnNvbGUubG9nKGFycmF5QSk7XG5cbiAgYXJyYXlCLnNvcnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheUEubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyYXlBW2ldICE9PSBhcnJheUJbaV0pIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuVXRpbGl0aWVzLmNvbnRhaW5zID0gZnVuY3Rpb24oX2xpc3QsIF92ZXJ0ZXgpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IF9saXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBfbGlzdFtpbmRleF07XG4gICAgaWYgKGVsZW1lbnQuaWQuZ2V0KCkgPT0gX3ZlcnRleC5pZC5nZXQoKSlcbiAgICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cblV0aWxpdGllcy5pbmNsdWRlID0gZnVuY3Rpb24oYXJyLCBvYmopIHtcbiAgcmV0dXJuIChhcnIuaW5kZXhPZihvYmopICE9IC0xKTtcbn1cblxuVXRpbGl0aWVzLmdldEluZGV4ID0gZnVuY3Rpb24oYXJyLCBvYmopIHtcbiAgcmV0dXJuIChhcnIuaW5kZXhPZihvYmopKTtcbn1cblxuVXRpbGl0aWVzLmdldElkcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGxldCByZXMgPSBbXVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcmVzLnB1c2goYXJyYXlbaW5kZXhdLmlkLmdldCgpKVxuICB9XG4gIHJldHVybiByZXM7XG59XG4vLyBVdGlsaXRpZXMuYWRkTm90RXhpc3RpbmcgPSBmdW5jdGlvbihhcnIsIG9iaikge1xuLy8gICByZXR1cm4gKGFyci5pbmRleE9mKG9iaikpO1xuLy8gfVxuXG5cbmV4cG9ydCB7XG4gIFV0aWxpdGllc1xufSJdfQ==