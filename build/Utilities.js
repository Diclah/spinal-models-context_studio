"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
let Utilities = {};
const globalType = typeof window === "undefined" ? global : window;

Utilities.getViewer = function () {
  return new Promise((resolve, reject) => {
    if (globalType.v === "undefined") {
      let interval = setInterval(() => {
        if (globalType.v !== "undefined") {
          resolve(globalType.v);
          clearInterval(interval);
        }
      }, 500);
    } else resolve(globalType.v);
  });
};

Utilities.promiseGetProperties = function (_dbId) {
  return new Promise(resolve => {
    Utilities.getViewer().then(viewer => {
      viewer.getProperties(_dbId, resolve);
    });
  });
};

Utilities.promiseGetExternalIdMapping = function (_externalId) {
  return new Promise(resolve => {
    Utilities.getViewer().then(viewer => {
      viewer.model.getExternalIdMapping(res => {
        resolve(res[_externalId]);
      });
    });
  });
};

Utilities.promiseLoad = function (_ptr) {
  return new Promise(resolve => {
    _ptr.load(resolve);
  });
};

Utilities.getExternalId = async function (_dbId) {
  let properties = await Utilities.promiseGetProperties(_dbId);
  return properties.externalId;
};

Utilities.getDbIdByExternalId = async function (_externalId) {
  let dbid = await Utilities.promiseGetExternalIdMapping(_externalId);
  return dbid;
};

Utilities.arraysEqual = function (arrayA, arrayB) {
  if (arrayA === arrayB) return true;
  if (arrayA == null || arrayB == null) return false;
  if (arrayA.length != arrayB.length) return false;
  arrayA.sort();
  arrayB.sort();
  for (var i = 0; i < arrayA.length; ++i) {
    if (arrayA[i] !== arrayB[i]) return false;
  }
  return true;
};

Utilities.containsLstById = function (_list, _node) {
  for (let index = 0; index < _list.length; index++) {
    const element = _list[index];
    if (element.id.get() == _node.id.get()) return true;
  }
  return false;
};

Utilities.containsLstModel = function (_list, _model) {
  for (let index = 0; index < _list.length; index++) {
    const element = _list[index];
    if (element.get() == _model.get()) return true;
  }
  return false;
};

Utilities.containsLst = function (_list, _element) {
  for (let index = 0; index < _list.length; index++) {
    const element = _list[index];
    if (element.get() == _element) return true;
  }
  return false;
};

Utilities.include = function (arr, obj) {
  return arr.indexOf(obj) != -1;
};

Utilities.getIndex = function (arr, obj) {
  return arr.indexOf(obj);
};

Utilities.getIds = function (array) {
  let res = [];
  for (let index = 0; index < array.length; index++) {
    res.push(array[index].id.get());
  }
  return res;
};
// Utilities.addNotExisting = function(arr, obj) {
//   return (arr.indexOf(obj));
// }

Utilities.concat = function (listA, listB) {
  let res = [];
  for (let index = 0; index < listA.length; index++) {
    res.push(listA[index]);
  }
  for (let index = 0; index < listB.length; index++) {
    res.push(listB[index]);
  }
  return res;
};

Utilities.allButMeById = function (_list, _node) {
  let res = [];
  for (let index = 0; index < _list.length; index++) {
    const node = _list[index];
    if (node.id.get() != _node.id.get()) {
      res.push(node);
    }
    return res;
  }
};

Utilities.guid = function (_constructor) {
  return _constructor + "-" + this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4() + "-" + Date.now().toString(16);
};

Utilities.s4 = function () {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
};

Utilities.putOnTopLst = function (lst, elementB) {
  lst.remove_ref(elementB);
  lst.unshift(elementB);
  // for (let index = 0; index < lst.length; index++) {
  //   const element = lst[index];
  //   if (element.id.get() === elementB.id.get()) {
  //     lst.remove(index);
  //   }

  // }
};

exports.Utilities = Utilities;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9VdGlsaXRpZXMuanMiXSwibmFtZXMiOlsiVXRpbGl0aWVzIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsImdldFZpZXdlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidiIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwicHJvbWlzZUdldFByb3BlcnRpZXMiLCJfZGJJZCIsInRoZW4iLCJ2aWV3ZXIiLCJnZXRQcm9wZXJ0aWVzIiwicHJvbWlzZUdldEV4dGVybmFsSWRNYXBwaW5nIiwiX2V4dGVybmFsSWQiLCJtb2RlbCIsImdldEV4dGVybmFsSWRNYXBwaW5nIiwicmVzIiwicHJvbWlzZUxvYWQiLCJfcHRyIiwibG9hZCIsImdldEV4dGVybmFsSWQiLCJwcm9wZXJ0aWVzIiwiZXh0ZXJuYWxJZCIsImdldERiSWRCeUV4dGVybmFsSWQiLCJkYmlkIiwiYXJyYXlzRXF1YWwiLCJhcnJheUEiLCJhcnJheUIiLCJsZW5ndGgiLCJzb3J0IiwiaSIsImNvbnRhaW5zTHN0QnlJZCIsIl9saXN0IiwiX25vZGUiLCJpbmRleCIsImVsZW1lbnQiLCJpZCIsImdldCIsImNvbnRhaW5zTHN0TW9kZWwiLCJfbW9kZWwiLCJjb250YWluc0xzdCIsIl9lbGVtZW50IiwiaW5jbHVkZSIsImFyciIsIm9iaiIsImluZGV4T2YiLCJnZXRJbmRleCIsImdldElkcyIsImFycmF5IiwicHVzaCIsImNvbmNhdCIsImxpc3RBIiwibGlzdEIiLCJhbGxCdXRNZUJ5SWQiLCJub2RlIiwiZ3VpZCIsIl9jb25zdHJ1Y3RvciIsInM0IiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic3Vic3RyaW5nIiwicHV0T25Ub3BMc3QiLCJsc3QiLCJlbGVtZW50QiIsInJlbW92ZV9yZWYiLCJ1bnNoaWZ0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFlBQVksRUFBaEI7QUFDQSxNQUFN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Q0EsR0FEQSxHQUVBLEtBQUtDLEVBQUwsRUFGQSxHQUdBLEtBQUtBLEVBQUwsRUFIQSxHQUlBLEdBSkEsR0FLQSxLQUFLQSxFQUFMLEVBTEEsR0FNQSxHQU5BLEdBT0EsS0FBS0EsRUFBTCxFQVBBLEdBUUEsR0FSQSxHQVNBLEtBQUtBLEVBQUwsRUFUQSxHQVVBLEdBVkEsR0FXQSxLQUFLQSxFQUFMLEVBWEEsR0FZQSxLQUFLQSxFQUFMLEVBWkEsR0FhQSxLQUFLQSxFQUFMLEVBYkEsR0FjQSxHQWRBLEdBZUFDLEtBQUtDLEdBQUwsR0FBV0MsUUFBWCxDQUFvQixFQUFwQixDQWhCRjtBQWtCRCxDQW5CRDs7QUFxQkFqRSxVQUFVOEQsRUFBVixHQUFlLFlBQVc7QUFDeEIsU0FBT0ksS0FBS0MsS0FBTCxDQUFXLENBQUMsSUFBSUQsS0FBS0UsTUFBTCxFQUFMLElBQXNCLE9BQWpDLEVBQ0pILFFBREksQ0FDSyxFQURMLEVBRUpJLFNBRkksQ0FFTSxDQUZOLENBQVA7QUFHRCxDQUpEOztBQU1BckUsVUFBVXNFLFdBQVYsR0FBd0IsVUFBU0MsR0FBVCxFQUFjQyxRQUFkLEVBQXdCO0FBQzlDRCxNQUFJRSxVQUFKLENBQWVELFFBQWY7QUFDQUQsTUFBSUcsT0FBSixDQUFZRixRQUFaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNELENBVkQ7O1FBZUV4RSxTLEdBQUFBLFMiLCJmaWxlIjoiVXRpbGl0aWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFV0aWxpdGllcyA9IHt9XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcblxuVXRpbGl0aWVzLmdldFZpZXdlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChnbG9iYWxUeXBlLnYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxldCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKGdsb2JhbFR5cGUudiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHJlc29sdmUoZ2xvYmFsVHlwZS52KVxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXG4gICAgICAgIH1cbiAgICAgIH0sIDUwMCk7XG4gICAgfSBlbHNlIHJlc29sdmUoZ2xvYmFsVHlwZS52KVxuICB9KVxufVxuXG5VdGlsaXRpZXMucHJvbWlzZUdldFByb3BlcnRpZXMgPSBmdW5jdGlvbihfZGJJZCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgVXRpbGl0aWVzLmdldFZpZXdlcigpLnRoZW4odmlld2VyID0+IHtcbiAgICAgIHZpZXdlci5nZXRQcm9wZXJ0aWVzKF9kYklkLCByZXNvbHZlKTtcbiAgICB9KVxuICB9KTtcbn1cblxuVXRpbGl0aWVzLnByb21pc2VHZXRFeHRlcm5hbElkTWFwcGluZyA9IGZ1bmN0aW9uKF9leHRlcm5hbElkKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBVdGlsaXRpZXMuZ2V0Vmlld2VyKCkudGhlbih2aWV3ZXIgPT4ge1xuICAgICAgdmlld2VyLm1vZGVsLmdldEV4dGVybmFsSWRNYXBwaW5nKHJlcyA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzW19leHRlcm5hbElkXSlcbiAgICAgIH0pO1xuICAgIH0pXG4gIH0pO1xufVxuXG5VdGlsaXRpZXMucHJvbWlzZUxvYWQgPSBmdW5jdGlvbihfcHRyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBfcHRyLmxvYWQocmVzb2x2ZSk7XG4gIH0pO1xufVxuXG5cblxuXG5VdGlsaXRpZXMuZ2V0RXh0ZXJuYWxJZCA9IGFzeW5jIGZ1bmN0aW9uKF9kYklkKSB7XG4gIGxldCBwcm9wZXJ0aWVzID0gYXdhaXQgVXRpbGl0aWVzLnByb21pc2VHZXRQcm9wZXJ0aWVzKF9kYklkKTtcbiAgcmV0dXJuIHByb3BlcnRpZXMuZXh0ZXJuYWxJZDtcbn1cblxuVXRpbGl0aWVzLmdldERiSWRCeUV4dGVybmFsSWQgPSBhc3luYyBmdW5jdGlvbihfZXh0ZXJuYWxJZCkge1xuICBsZXQgZGJpZCA9IGF3YWl0IFV0aWxpdGllcy5wcm9taXNlR2V0RXh0ZXJuYWxJZE1hcHBpbmcoX2V4dGVybmFsSWQpO1xuICByZXR1cm4gZGJpZDtcbn1cblxuVXRpbGl0aWVzLmFycmF5c0VxdWFsID0gZnVuY3Rpb24oYXJyYXlBLCBhcnJheUIpIHtcbiAgaWYgKGFycmF5QSA9PT0gYXJyYXlCKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGFycmF5QSA9PSBudWxsIHx8IGFycmF5QiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChhcnJheUEubGVuZ3RoICE9IGFycmF5Qi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgYXJyYXlBLnNvcnQoKTtcbiAgYXJyYXlCLnNvcnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheUEubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyYXlBW2ldICE9PSBhcnJheUJbaV0pIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuVXRpbGl0aWVzLmNvbnRhaW5zTHN0QnlJZCA9IGZ1bmN0aW9uKF9saXN0LCBfbm9kZSkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgX2xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IF9saXN0W2luZGV4XTtcbiAgICBpZiAoZWxlbWVudC5pZC5nZXQoKSA9PSBfbm9kZS5pZC5nZXQoKSlcbiAgICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cblV0aWxpdGllcy5jb250YWluc0xzdE1vZGVsID0gZnVuY3Rpb24oX2xpc3QsIF9tb2RlbCkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgX2xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IF9saXN0W2luZGV4XTtcbiAgICBpZiAoZWxlbWVudC5nZXQoKSA9PSBfbW9kZWwuZ2V0KCkpXG4gICAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5VdGlsaXRpZXMuY29udGFpbnNMc3QgPSBmdW5jdGlvbihfbGlzdCwgX2VsZW1lbnQpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IF9saXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBfbGlzdFtpbmRleF07XG4gICAgaWYgKGVsZW1lbnQuZ2V0KCkgPT0gX2VsZW1lbnQpXG4gICAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5VdGlsaXRpZXMuaW5jbHVkZSA9IGZ1bmN0aW9uKGFyciwgb2JqKSB7XG4gIHJldHVybiAoYXJyLmluZGV4T2Yob2JqKSAhPSAtMSk7XG59XG5cblV0aWxpdGllcy5nZXRJbmRleCA9IGZ1bmN0aW9uKGFyciwgb2JqKSB7XG4gIHJldHVybiAoYXJyLmluZGV4T2Yob2JqKSk7XG59XG5cblV0aWxpdGllcy5nZXRJZHMgPSBmdW5jdGlvbihhcnJheSkge1xuICBsZXQgcmVzID0gW11cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHJlcy5wdXNoKGFycmF5W2luZGV4XS5pZC5nZXQoKSlcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuLy8gVXRpbGl0aWVzLmFkZE5vdEV4aXN0aW5nID0gZnVuY3Rpb24oYXJyLCBvYmopIHtcbi8vICAgcmV0dXJuIChhcnIuaW5kZXhPZihvYmopKTtcbi8vIH1cblxuVXRpbGl0aWVzLmNvbmNhdCA9IGZ1bmN0aW9uKGxpc3RBLCBsaXN0Qikge1xuICBsZXQgcmVzID0gW11cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxpc3RBLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHJlcy5wdXNoKGxpc3RBW2luZGV4XSlcbiAgfVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGlzdEIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcmVzLnB1c2gobGlzdEJbaW5kZXhdKVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cblV0aWxpdGllcy5hbGxCdXRNZUJ5SWQgPSBmdW5jdGlvbihfbGlzdCwgX25vZGUpIHtcbiAgbGV0IHJlcyA9IFtdO1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgX2xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3Qgbm9kZSA9IF9saXN0W2luZGV4XTtcbiAgICBpZiAobm9kZS5pZC5nZXQoKSAhPSBfbm9kZS5pZC5nZXQoKSkge1xuICAgICAgcmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbn1cblxuVXRpbGl0aWVzLmd1aWQgPSBmdW5jdGlvbihfY29uc3RydWN0b3IpIHtcbiAgcmV0dXJuIChcbiAgICBfY29uc3RydWN0b3IgK1xuICAgIFwiLVwiICtcbiAgICB0aGlzLnM0KCkgK1xuICAgIHRoaXMuczQoKSArXG4gICAgXCItXCIgK1xuICAgIHRoaXMuczQoKSArXG4gICAgXCItXCIgK1xuICAgIHRoaXMuczQoKSArXG4gICAgXCItXCIgK1xuICAgIHRoaXMuczQoKSArXG4gICAgXCItXCIgK1xuICAgIHRoaXMuczQoKSArXG4gICAgdGhpcy5zNCgpICtcbiAgICB0aGlzLnM0KCkgK1xuICAgIFwiLVwiICtcbiAgICBEYXRlLm5vdygpLnRvU3RyaW5nKDE2KVxuICApO1xufVxuXG5VdGlsaXRpZXMuczQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgLnRvU3RyaW5nKDE2KVxuICAgIC5zdWJzdHJpbmcoMSk7XG59XG5cblV0aWxpdGllcy5wdXRPblRvcExzdCA9IGZ1bmN0aW9uKGxzdCwgZWxlbWVudEIpIHtcbiAgbHN0LnJlbW92ZV9yZWYoZWxlbWVudEIpO1xuICBsc3QudW5zaGlmdChlbGVtZW50Qik7XG4gIC8vIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gIC8vICAgY29uc3QgZWxlbWVudCA9IGxzdFtpbmRleF07XG4gIC8vICAgaWYgKGVsZW1lbnQuaWQuZ2V0KCkgPT09IGVsZW1lbnRCLmlkLmdldCgpKSB7XG4gIC8vICAgICBsc3QucmVtb3ZlKGluZGV4KTtcbiAgLy8gICB9XG5cbiAgLy8gfVxufVxuXG5cblxuZXhwb3J0IHtcbiAgVXRpbGl0aWVzXG59Il19