"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SpinalNode = require("./SpinalNode");

var _SpinalNode2 = _interopRequireDefault(_SpinalNode);

var _SpinalRelation = require("./SpinalRelation");

var _SpinalRelation2 = _interopRequireDefault(_SpinalRelation);

var _AbstractElement = require("./AbstractElement");

var _AbstractElement2 = _interopRequireDefault(_AbstractElement);

var _BIMElement = require("./BIMElement");

var _BIMElement2 = _interopRequireDefault(_BIMElement);

var _SpinalContext = require("./SpinalContext");

var _SpinalContext2 = _interopRequireDefault(_SpinalContext);

var _Utilities = require("./Utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
class Graph extends globalType.Model {
  constructor(_name, _startingNode, name = "Graph") {
    super();
    if (FileSystem._sig_server) {
      this.add_attr({
        name: _name || "",
        externalIdNodeMapping: new Model(),
        guidAbstractNodeMapping: new Model(),
        startingNode: _startingNode || new Ptr(0),
        nodeList: new Ptr(new Lst()),
        nodeListByElementType: new Model(),
        relationList: new Ptr(new Lst()),
        relationListByType: new Model(),
        contextList: new Lst()
      });
    }
  }

  init() {
    globalType.spinal.contextStudio = {};
    globalType.spinal.contextStudio.graph = this;
    globalType.spinal.contextStudio.SpinalNode = _SpinalNode2.default;
    globalType.spinal.contextStudio.SpinalRelation = _SpinalRelation2.default;
    globalType.spinal.contextStudio.AbstractElement = _AbstractElement2.default;
    globalType.spinal.contextStudio.BIMElement = _BIMElement2.default;
    globalType.spinal.contextStudio.Utilities = _Utilities.Utilities;
  }

  async getNodeBydbId(_dbId) {
    let _externalId = await _Utilities.Utilities.getExternalId(_dbId);
    if (typeof this.externalIdNodeMapping[_externalId] !== "undefined") return this.externalIdNodeMapping[_externalId];else {
      let BIMElement1 = new _BIMElement2.default(_dbId);
      BIMElement1.initExternalId();
      let node = await this.addNodeAsync(BIMElement1);
      if (BIMElement1.type.get() === "") {
        BIMElement1.type.bind(this._classifyBIMElementNode.bind(this, node));
      }
      return node;
    }
  }

  async _classifyBIMElementNode(_node) {
    //TODO DELETE OLD CLASSIFICATION
    this.classifyNode(_node);
  }

  async getDbIdByNode(_node) {
    let element = await _Utilities.Utilities.promiseLoad(_node.element);
    if (element instanceof _BIMElement2.default) {
      return element.id.get();
    }
  }

  setName(_name) {
    this.name.set(_name);
  }

  setStartingNode(_startingNode) {
    this.startingNode.set(_startingNode);
  }

  async _addExternalIdNodeMappingEntry(_ElementId, _node) {
    let _dbid = _ElementId.get();
    if (typeof _dbid == "number") if (_dbid != 0) {
      let externalId = await _Utilities.Utilities.getExternalId(_dbid);
      let element = await _Utilities.Utilities.promiseLoad(_node.element);
      await element.initExternalId();
      if (typeof this.externalIdNodeMapping[externalId] === "undefined") this.externalIdNodeMapping.add_attr({
        [externalId]: _node
      });
      _ElementId.unbind(this._addExternalIdNodeMappingEntry.bind(this, _ElementId, _node));
    }
  }

  async addNodeAsync(_element) {
    let name = "";
    if (_element instanceof _BIMElement2.default) {
      await _element.initExternalIdAsync();
      if (typeof this.externalIdNodeMapping[_element.externalId.get()] !== "undefined") {
        console.log("BIM OBJECT NODE ALREADY EXISTS");
        return this.externalIdNodeMapping[_element.externalId.get()];
      }
    } else if (_element instanceof _AbstractElement2.default) {
      if (typeof this.guidAbstractNodeMapping[_element.id.get()] !== "undefined") {
        console.log("ABSTRACT OBJECT NODE ALREADY EXISTS");
        return this.guidAbstractNodeMapping[_element.id.get()];
      }
    }
    if (typeof _element.name !== "undefined") {
      name = _element.name.get();
    }
    let node = new _SpinalNode2.default(name, _element, this);
    return node;
  }

  addNode(_element) {
    let name = "";
    if (_element instanceof _BIMElement2.default) {
      _element.initExternalId();
      if (typeof this.externalIdNodeMapping[_element.externalId.get()] !== "undefined") {
        console.log("BIM OBJECT NODE ALREADY EXISTS");
        return this.externalIdNodeMapping[_element.externalId.get()];
      }
    } else if (_element instanceof _AbstractElement2.default) {
      if (typeof this.guidAbstractNodeMapping[_element.id.get()] !== "undefined") {
        console.log("ABSTRACT OBJECT NODE ALREADY EXISTS");
        return this.guidAbstractNodeMapping[_element.id.get()];
      }
    }
    if (typeof _element.name !== "undefined") {
      name = _element.name.get();
    }
    let node = new _SpinalNode2.default(name, _element, this);
    return node;
  }

  classifyNode(_node) {
    _Utilities.Utilities.promiseLoad(_node.element).then(element => {
      if (typeof _node.graph === "undefined") _node.graph.set(this);
      this.nodeList.load(nodeList => {
        nodeList.push(_node);
      });
      let type = "UnClassified";
      if (typeof element.type != "undefined" && element.type.get() != "") {
        type = element.type.get();
      }
      if (this.nodeListByElementType[type]) {
        this.nodeListByElementType[type].load(nodeListOfType => {
          nodeListOfType.push(_node);
        });
      } else {
        let nodeListOfType = new Lst();
        nodeListOfType.push(_node);
        this.nodeListByElementType.add_attr({
          [type]: new Ptr(nodeListOfType)
        });
      }
      if (element instanceof _BIMElement2.default) {
        let _dbid = element.id.get();
        if (typeof _dbid == "number") if (_dbid != 0) {
          this._addExternalIdNodeMappingEntry(element.id, _node);
        } else {
          element.id.bind(this._addExternalIdNodeMappingEntry.bind(null, element.id, _node));
        }
      } else if (element instanceof _AbstractElement2.default) {
        this.guidAbstractNodeMapping.add_attr({
          [element.id.get()]: _node
        });
      }
    });
  }

  // addNodes(_vertices) {
  //   for (let index = 0; index < _vertices.length; index++) {
  //     this.classifyNode(_vertices[index])
  //   }
  // }

  async addSimpleRelationAsync(_relationType, _node, _element, _isDirected) {
    let node2 = await this.addNodeAsync(_element);
    let rel = new _SpinalRelation2.default(_relationType, _node, node2, _isDirected);
    return rel;
  }

  addSimpleRelation(_relationType, _node, _element, _isDirected) {
    let node2 = this.addNode(_element);
    let rel = new _SpinalRelation2.default(_relationType, _node, node2, _isDirected);
    return rel;
  }

  addRelation(_relation) {
    if (_relation.isDirected.get()) {
      for (let index = 0; index < _relation.nodeList1.length; index++) {
        const node = _relation.nodeList1[index];
        node.addDirectedRelationParent(_relation);
      }
      for (let index = 0; index < _relation.nodeList2.length; index++) {
        const node = _relation.nodeList2[index];
        node.addDirectedRelationChild(_relation);
      }
    } else {
      for (let index = 0; index < _relation.nodeList1.length; index++) {
        const node = _relation.nodeList1[index];
        node.addNonDirectedRelation(_relation);
      }
      for (let index = 0; index < _relation.nodeList2.length; index++) {
        const node = _relation.nodeList2[index];
        node.addNonDirectedRelation(_relation);
      }
    }
    this._classifyRelation(_relation);
  }

  addRelations(_relations) {
    for (let index = 0; index < _relations.length; index++) {
      const relation = _relations[index];
      this.addRelation(relation);
    }
  }

  _classifyRelation(_relation) {
    this.relationList.load(relationList => {
      relationList.push(_relation);
    });
    if (this.relationListByType[_relation.type.get()]) {
      this.relationListByType[_relation.type.get()].load(relationListOfType => {
        relationListOfType.push(_relation);
      });
    } else {
      let relationListOfType = new Lst();
      relationListOfType.push(_relation);
      this.relationListByType.add_attr({
        [_relation.type.get()]: new Ptr(relationListOfType)
      });
    }
  }

  _classifyRelations(_relations) {
    for (let index = 0; index < _relations.length; index++) {
      this.classRelation(_relations[index]);
    }
  }

  _addNotExistingNodesFromList(_list) {
    this.nodeList.load(nodeList => {
      for (let i = 0; i < _list.length; i++) {
        let node = _list[i];
        if (!_Utilities.Utilities.contains(nodeList, node)) {
          this.classifyNode(node);
        }
      }
    });
  }

  _addNotExistingNodesFromRelation(_relation) {
    this._addNotExistingNodesFromList(_relation.nodeList1);
    this._addNotExistingNodesFromList(_relation.nodeList2);
  }

  addContext(_name, _usedRelations, _startingNode, _usedGraph) {
    let context = new _SpinalContext2.default(_name, _usedRelations, _startingNode, _usedGraph);
    this.contextList.push(context);
    return context;
  }
}

exports.default = Graph;
spinalCore.register_models([Graph]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9HcmFwaC5qcyJdLCJuYW1lcyI6WyJzcGluYWxDb3JlIiwicmVxdWlyZSIsImdsb2JhbFR5cGUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJHcmFwaCIsIk1vZGVsIiwiY29uc3RydWN0b3IiLCJfbmFtZSIsIl9zdGFydGluZ05vZGUiLCJuYW1lIiwiRmlsZVN5c3RlbSIsIl9zaWdfc2VydmVyIiwiYWRkX2F0dHIiLCJleHRlcm5hbElkTm9kZU1hcHBpbmciLCJndWlkQWJzdHJhY3ROb2RlTWFwcGluZyIsInN0YXJ0aW5nTm9kZSIsIlB0ciIsIm5vZGVMaXN0IiwiTHN0Iiwibm9kZUxpc3RCeUVsZW1lbnRUeXBlIiwicmVsYXRpb25MaXN0IiwicmVsYXRpb25MaXN0QnlUeXBlIiwiY29udGV4dExpc3QiLCJpbml0Iiwic3BpbmFsIiwiY29udGV4dFN0dWRpbyIsImdyYXBoIiwiU3BpbmFsTm9kZSIsIlNwaW5hbFJlbGF0aW9uIiwiQWJzdHJhY3RFbGVtZW50IiwiQklNRWxlbWVudCIsIlV0aWxpdGllcyIsImdldE5vZGVCeWRiSWQiLCJfZGJJZCIsIl9leHRlcm5hbElkIiwiZ2V0RXh0ZXJuYWxJZCIsIkJJTUVsZW1lbnQxIiwiaW5pdEV4dGVybmFsSWQiLCJub2RlIiwiYWRkTm9kZUFzeW5jIiwidHlwZSIsImdldCIsImJpbmQiLCJfY2xhc3NpZnlCSU1FbGVtZW50Tm9kZSIsIl9ub2RlIiwiY2xhc3NpZnlOb2RlIiwiZ2V0RGJJZEJ5Tm9kZSIsImVsZW1lbnQiLCJwcm9taXNlTG9hZCIsImlkIiwic2V0TmFtZSIsInNldCIsInNldFN0YXJ0aW5nTm9kZSIsIl9hZGRFeHRlcm5hbElkTm9kZU1hcHBpbmdFbnRyeSIsIl9FbGVtZW50SWQiLCJfZGJpZCIsImV4dGVybmFsSWQiLCJ1bmJpbmQiLCJfZWxlbWVudCIsImluaXRFeHRlcm5hbElkQXN5bmMiLCJjb25zb2xlIiwibG9nIiwiYWRkTm9kZSIsInRoZW4iLCJsb2FkIiwicHVzaCIsIm5vZGVMaXN0T2ZUeXBlIiwiYWRkU2ltcGxlUmVsYXRpb25Bc3luYyIsIl9yZWxhdGlvblR5cGUiLCJfaXNEaXJlY3RlZCIsIm5vZGUyIiwicmVsIiwiYWRkU2ltcGxlUmVsYXRpb24iLCJhZGRSZWxhdGlvbiIsIl9yZWxhdGlvbiIsImlzRGlyZWN0ZWQiLCJpbmRleCIsIm5vZGVMaXN0MSIsImxlbmd0aCIsImFkZERpcmVjdGVkUmVsYXRpb25QYXJlbnQiLCJub2RlTGlzdDIiLCJhZGREaXJlY3RlZFJlbGF0aW9uQ2hpbGQiLCJhZGROb25EaXJlY3RlZFJlbGF0aW9uIiwiX2NsYXNzaWZ5UmVsYXRpb24iLCJhZGRSZWxhdGlvbnMiLCJfcmVsYXRpb25zIiwicmVsYXRpb24iLCJyZWxhdGlvbkxpc3RPZlR5cGUiLCJfY2xhc3NpZnlSZWxhdGlvbnMiLCJjbGFzc1JlbGF0aW9uIiwiX2FkZE5vdEV4aXN0aW5nTm9kZXNGcm9tTGlzdCIsIl9saXN0IiwiaSIsImNvbnRhaW5zIiwiX2FkZE5vdEV4aXN0aW5nTm9kZXNGcm9tUmVsYXRpb24iLCJhZGRDb250ZXh0IiwiX3VzZWRSZWxhdGlvbnMiLCJfdXNlZEdyYXBoIiwiY29udGV4dCIsIlNwaW5hbENvbnRleHQiLCJyZWdpc3Rlcl9tb2RlbHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQVJBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQVdlLE1BQU1FLEtBQU4sU0FBb0JILFdBQVdJLEtBQS9CLENBQXFDO0FBQ2xEQyxjQUFZQyxLQUFaLEVBQW1CQyxhQUFuQixFQUFrQ0MsT0FBTyxPQUF6QyxFQUFrRDtBQUNoRDtBQUNBLFFBQUlDLFdBQVdDLFdBQWYsRUFBNEI7QUFDMUIsV0FBS0MsUUFBTCxDQUFjO0FBQ1pILGNBQU1GLFNBQVMsRUFESDtBQUVaTSwrQkFB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LFlBQUwsQ0FBa0JQLElBQWxCO0FBQ0Q7QUFDRjtBQUNGLEtBUEQ7QUFRRDs7QUFFRHdELG1DQUFpQ3BCLFNBQWpDLEVBQTRDO0FBQzFDLFNBQUtnQiw0QkFBTCxDQUFrQ2hCLFVBQVVHLFNBQTVDO0FBQ0EsU0FBS2EsNEJBQUwsQ0FBa0NoQixVQUFVTSxTQUE1QztBQUNEOztBQUVEZSxhQUFXeEYsS0FBWCxFQUFrQnlGLGNBQWxCLEVBQWtDeEYsYUFBbEMsRUFBaUR5RixVQUFqRCxFQUE2RDtBQUMzRCxRQUFJQyxVQUFVLElBQUlDLHVCQUFKLENBQWtCNUYsS0FBbEIsRUFBeUJ5RixjQUF6QixFQUF5Q3hGLGFBQXpDLEVBQ1p5RixVQURZLENBQWQ7QUFFQSxTQUFLM0UsV0FBTCxDQUFpQjJDLElBQWpCLENBQXNCaUMsT0FBdEI7QUFDQSxXQUFPQSxPQUFQO0FBQ0Q7QUE5UWlEOztrQkFBL0I5RixLO0FBaVJyQkwsV0FBV3FHLGVBQVgsQ0FBMkIsQ0FBQ2hHLEtBQUQsQ0FBM0IiLCJmaWxlIjoiR3JhcGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5pbXBvcnQgU3BpbmFsTm9kZSBmcm9tIFwiLi9TcGluYWxOb2RlXCI7XG5pbXBvcnQgU3BpbmFsUmVsYXRpb24gZnJvbSBcIi4vU3BpbmFsUmVsYXRpb25cIjtcbmltcG9ydCBBYnN0cmFjdEVsZW1lbnQgZnJvbSBcIi4vQWJzdHJhY3RFbGVtZW50XCI7XG5pbXBvcnQgQklNRWxlbWVudCBmcm9tIFwiLi9CSU1FbGVtZW50XCI7XG5pbXBvcnQgU3BpbmFsQ29udGV4dCBmcm9tIFwiLi9TcGluYWxDb250ZXh0XCI7XG5cbmltcG9ydCB7XG4gIFV0aWxpdGllc1xufSBmcm9tIFwiLi9VdGlsaXRpZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGggZXh0ZW5kcyBnbG9iYWxUeXBlLk1vZGVsIHtcbiAgY29uc3RydWN0b3IoX25hbWUsIF9zdGFydGluZ05vZGUsIG5hbWUgPSBcIkdyYXBoXCIpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChGaWxlU3lzdGVtLl9zaWdfc2VydmVyKSB7XG4gICAgICB0aGlzLmFkZF9hdHRyKHtcbiAgICAgICAgbmFtZTogX25hbWUgfHwgXCJcIixcbiAgICAgICAgZXh0ZXJuYWxJZE5vZGVNYXBwaW5nOiBuZXcgTW9kZWwoKSxcbiAgICAgICAgZ3VpZEFic3RyYWN0Tm9kZU1hcHBpbmc6IG5ldyBNb2RlbCgpLFxuICAgICAgICBzdGFydGluZ05vZGU6IF9zdGFydGluZ05vZGUgfHwgbmV3IFB0cigwKSxcbiAgICAgICAgbm9kZUxpc3Q6IG5ldyBQdHIobmV3IExzdCgpKSxcbiAgICAgICAgbm9kZUxpc3RCeUVsZW1lbnRUeXBlOiBuZXcgTW9kZWwoKSxcbiAgICAgICAgcmVsYXRpb25MaXN0OiBuZXcgUHRyKG5ldyBMc3QoKSksXG4gICAgICAgIHJlbGF0aW9uTGlzdEJ5VHlwZTogbmV3IE1vZGVsKCksXG4gICAgICAgIGNvbnRleHRMaXN0OiBuZXcgTHN0KClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgZ2xvYmFsVHlwZS5zcGluYWwuY29udGV4dFN0dWRpbyA9IHt9O1xuICAgIGdsb2JhbFR5cGUuc3BpbmFsLmNvbnRleHRTdHVkaW8uZ3JhcGggPSB0aGlzO1xuICAgIGdsb2JhbFR5cGUuc3BpbmFsLmNvbnRleHRTdHVkaW8uU3BpbmFsTm9kZSA9IFNwaW5hbE5vZGU7XG4gICAgZ2xvYmFsVHlwZS5zcGluYWwuY29udGV4dFN0dWRpby5TcGluYWxSZWxhdGlvbiA9IFNwaW5hbFJlbGF0aW9uO1xuICAgIGdsb2JhbFR5cGUuc3BpbmFsLmNvbnRleHRTdHVkaW8uQWJzdHJhY3RFbGVtZW50ID0gQWJzdHJhY3RFbGVtZW50O1xuICAgIGdsb2JhbFR5cGUuc3BpbmFsLmNvbnRleHRTdHVkaW8uQklNRWxlbWVudCA9IEJJTUVsZW1lbnQ7XG4gICAgZ2xvYmFsVHlwZS5zcGluYWwuY29udGV4dFN0dWRpby5VdGlsaXRpZXMgPSBVdGlsaXRpZXM7XG4gIH1cblxuICBhc3luYyBnZXROb2RlQnlkYklkKF9kYklkKSB7XG4gICAgbGV0IF9leHRlcm5hbElkID0gYXdhaXQgVXRpbGl0aWVzLmdldEV4dGVybmFsSWQoX2RiSWQpO1xuICAgIGlmICh0eXBlb2YgdGhpcy5leHRlcm5hbElkTm9kZU1hcHBpbmdbX2V4dGVybmFsSWRdICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxJZE5vZGVNYXBwaW5nW19leHRlcm5hbElkXTtcbiAgICBlbHNlIHtcbiAgICAgIGxldCBCSU1FbGVtZW50MSA9IG5ldyBCSU1FbGVtZW50KF9kYklkKTtcbiAgICAgIEJJTUVsZW1lbnQxLmluaXRFeHRlcm5hbElkKCk7XG4gICAgICBsZXQgbm9kZSA9IGF3YWl0IHRoaXMuYWRkTm9kZUFzeW5jKEJJTUVsZW1lbnQxKTtcbiAgICAgIGlmIChCSU1FbGVtZW50MS50eXBlLmdldCgpID09PSBcIlwiKSB7XG4gICAgICAgIEJJTUVsZW1lbnQxLnR5cGUuYmluZChcbiAgICAgICAgICB0aGlzLl9jbGFzc2lmeUJJTUVsZW1lbnROb2RlLmJpbmQodGhpcywgbm9kZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9jbGFzc2lmeUJJTUVsZW1lbnROb2RlKF9ub2RlKSB7XG4gICAgLy9UT0RPIERFTEVURSBPTEQgQ0xBU1NJRklDQVRJT05cbiAgICB0aGlzLmNsYXNzaWZ5Tm9kZShfbm9kZSk7XG4gIH1cblxuICBhc3luYyBnZXREYklkQnlOb2RlKF9ub2RlKSB7XG4gICAgbGV0IGVsZW1lbnQgPSBhd2FpdCBVdGlsaXRpZXMucHJvbWlzZUxvYWQoX25vZGUuZWxlbWVudCk7XG4gICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBCSU1FbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pZC5nZXQoKTtcbiAgICB9XG4gIH1cblxuICBzZXROYW1lKF9uYW1lKSB7XG4gICAgdGhpcy5uYW1lLnNldChfbmFtZSk7XG4gIH1cblxuICBzZXRTdGFydGluZ05vZGUoX3N0YXJ0aW5nTm9kZSkge1xuICAgIHRoaXMuc3RhcnRpbmdOb2RlLnNldChfc3RhcnRpbmdOb2RlKTtcbiAgfVxuXG4gIGFzeW5jIF9hZGRFeHRlcm5hbElkTm9kZU1hcHBpbmdFbnRyeShfRWxlbWVudElkLCBfbm9kZSkge1xuICAgIGxldCBfZGJpZCA9IF9FbGVtZW50SWQuZ2V0KCk7XG4gICAgaWYgKHR5cGVvZiBfZGJpZCA9PSBcIm51bWJlclwiKVxuICAgICAgaWYgKF9kYmlkICE9IDApIHtcbiAgICAgICAgbGV0IGV4dGVybmFsSWQgPSBhd2FpdCBVdGlsaXRpZXMuZ2V0RXh0ZXJuYWxJZChfZGJpZCk7XG4gICAgICAgIGxldCBlbGVtZW50ID0gYXdhaXQgVXRpbGl0aWVzLnByb21pc2VMb2FkKF9ub2RlLmVsZW1lbnQpO1xuICAgICAgICBhd2FpdCBlbGVtZW50LmluaXRFeHRlcm5hbElkKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5leHRlcm5hbElkTm9kZU1hcHBpbmdbZXh0ZXJuYWxJZF0gPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgdGhpcy5leHRlcm5hbElkTm9kZU1hcHBpbmcuYWRkX2F0dHIoe1xuICAgICAgICAgICAgW2V4dGVybmFsSWRdOiBfbm9kZVxuICAgICAgICAgIH0pO1xuICAgICAgICBfRWxlbWVudElkLnVuYmluZChcbiAgICAgICAgICB0aGlzLl9hZGRFeHRlcm5hbElkTm9kZU1hcHBpbmdFbnRyeS5iaW5kKHRoaXMsIF9FbGVtZW50SWQsXG4gICAgICAgICAgICBfbm9kZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFkZE5vZGVBc3luYyhfZWxlbWVudCkge1xuICAgIGxldCBuYW1lID0gXCJcIjtcbiAgICBpZiAoX2VsZW1lbnQgaW5zdGFuY2VvZiBCSU1FbGVtZW50KSB7XG4gICAgICBhd2FpdCBfZWxlbWVudC5pbml0RXh0ZXJuYWxJZEFzeW5jKCk7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiB0aGlzLmV4dGVybmFsSWROb2RlTWFwcGluZ1tfZWxlbWVudC5leHRlcm5hbElkLmdldCgpXSAhPT1cbiAgICAgICAgXCJ1bmRlZmluZWRcIlxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQklNIE9CSkVDVCBOT0RFIEFMUkVBRFkgRVhJU1RTXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlcm5hbElkTm9kZU1hcHBpbmdbX2VsZW1lbnQuZXh0ZXJuYWxJZC5nZXQoKV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfZWxlbWVudCBpbnN0YW5jZW9mIEFic3RyYWN0RWxlbWVudCkge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgdGhpcy5ndWlkQWJzdHJhY3ROb2RlTWFwcGluZ1tfZWxlbWVudC5pZC5nZXQoKV0gIT09XG4gICAgICAgIFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFCU1RSQUNUIE9CSkVDVCBOT0RFIEFMUkVBRFkgRVhJU1RTXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5ndWlkQWJzdHJhY3ROb2RlTWFwcGluZ1tfZWxlbWVudC5pZC5nZXQoKV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgX2VsZW1lbnQubmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbmFtZSA9IF9lbGVtZW50Lm5hbWUuZ2V0KCk7XG4gICAgfVxuICAgIGxldCBub2RlID0gbmV3IFNwaW5hbE5vZGUobmFtZSwgX2VsZW1lbnQsIHRoaXMpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgYWRkTm9kZShfZWxlbWVudCkge1xuICAgIGxldCBuYW1lID0gXCJcIjtcbiAgICBpZiAoX2VsZW1lbnQgaW5zdGFuY2VvZiBCSU1FbGVtZW50KSB7XG4gICAgICBfZWxlbWVudC5pbml0RXh0ZXJuYWxJZCgpO1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgdGhpcy5leHRlcm5hbElkTm9kZU1hcHBpbmdbX2VsZW1lbnQuZXh0ZXJuYWxJZC5nZXQoKV0gIT09XG4gICAgICAgIFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkJJTSBPQkpFQ1QgTk9ERSBBTFJFQURZIEVYSVNUU1wiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxJZE5vZGVNYXBwaW5nW19lbGVtZW50LmV4dGVybmFsSWQuZ2V0KCldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX2VsZW1lbnQgaW5zdGFuY2VvZiBBYnN0cmFjdEVsZW1lbnQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHRoaXMuZ3VpZEFic3RyYWN0Tm9kZU1hcHBpbmdbX2VsZW1lbnQuaWQuZ2V0KCldICE9PVxuICAgICAgICBcInVuZGVmaW5lZFwiXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBQlNUUkFDVCBPQkpFQ1QgTk9ERSBBTFJFQURZIEVYSVNUU1wiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VpZEFic3RyYWN0Tm9kZU1hcHBpbmdbX2VsZW1lbnQuaWQuZ2V0KCldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIF9lbGVtZW50Lm5hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG5hbWUgPSBfZWxlbWVudC5uYW1lLmdldCgpO1xuICAgIH1cbiAgICBsZXQgbm9kZSA9IG5ldyBTcGluYWxOb2RlKG5hbWUsIF9lbGVtZW50LCB0aGlzKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGNsYXNzaWZ5Tm9kZShfbm9kZSkge1xuICAgIFV0aWxpdGllcy5wcm9taXNlTG9hZChfbm9kZS5lbGVtZW50KS50aGVuKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBfbm9kZS5ncmFwaCA9PT0gXCJ1bmRlZmluZWRcIikgX25vZGUuZ3JhcGguc2V0KHRoaXMpO1xuICAgICAgdGhpcy5ub2RlTGlzdC5sb2FkKG5vZGVMaXN0ID0+IHtcbiAgICAgICAgbm9kZUxpc3QucHVzaChfbm9kZSk7XG4gICAgICB9KTtcbiAgICAgIGxldCB0eXBlID0gXCJVbkNsYXNzaWZpZWRcIjtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlICE9IFwidW5kZWZpbmVkXCIgJiYgZWxlbWVudC50eXBlLmdldCgpICE9XG4gICAgICAgIFwiXCIpIHtcbiAgICAgICAgdHlwZSA9IGVsZW1lbnQudHlwZS5nZXQoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5vZGVMaXN0QnlFbGVtZW50VHlwZVt0eXBlXSkge1xuICAgICAgICB0aGlzLm5vZGVMaXN0QnlFbGVtZW50VHlwZVt0eXBlXS5sb2FkKG5vZGVMaXN0T2ZUeXBlID0+IHtcbiAgICAgICAgICBub2RlTGlzdE9mVHlwZS5wdXNoKF9ub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbm9kZUxpc3RPZlR5cGUgPSBuZXcgTHN0KCk7XG4gICAgICAgIG5vZGVMaXN0T2ZUeXBlLnB1c2goX25vZGUpO1xuICAgICAgICB0aGlzLm5vZGVMaXN0QnlFbGVtZW50VHlwZS5hZGRfYXR0cih7XG4gICAgICAgICAgW3R5cGVdOiBuZXcgUHRyKG5vZGVMaXN0T2ZUeXBlKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQklNRWxlbWVudCkge1xuICAgICAgICBsZXQgX2RiaWQgPSBlbGVtZW50LmlkLmdldCgpO1xuICAgICAgICBpZiAodHlwZW9mIF9kYmlkID09IFwibnVtYmVyXCIpXG4gICAgICAgICAgaWYgKF9kYmlkICE9IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZEV4dGVybmFsSWROb2RlTWFwcGluZ0VudHJ5KGVsZW1lbnQuaWQsIF9ub2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5pZC5iaW5kKFxuICAgICAgICAgICAgICB0aGlzLl9hZGRFeHRlcm5hbElkTm9kZU1hcHBpbmdFbnRyeS5iaW5kKG51bGwsIGVsZW1lbnQuaWQsXG4gICAgICAgICAgICAgICAgX25vZGUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEFic3RyYWN0RWxlbWVudCkge1xuICAgICAgICB0aGlzLmd1aWRBYnN0cmFjdE5vZGVNYXBwaW5nLmFkZF9hdHRyKHtcbiAgICAgICAgICBbZWxlbWVudC5pZC5nZXQoKV06IF9ub2RlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gYWRkTm9kZXMoX3ZlcnRpY2VzKSB7XG4gIC8vICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IF92ZXJ0aWNlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgLy8gICAgIHRoaXMuY2xhc3NpZnlOb2RlKF92ZXJ0aWNlc1tpbmRleF0pXG4gIC8vICAgfVxuICAvLyB9XG5cbiAgYXN5bmMgYWRkU2ltcGxlUmVsYXRpb25Bc3luYyhfcmVsYXRpb25UeXBlLCBfbm9kZSwgX2VsZW1lbnQsIF9pc0RpcmVjdGVkKSB7XG4gICAgbGV0IG5vZGUyID0gYXdhaXQgdGhpcy5hZGROb2RlQXN5bmMoX2VsZW1lbnQpO1xuICAgIGxldCByZWwgPSBuZXcgU3BpbmFsUmVsYXRpb24oX3JlbGF0aW9uVHlwZSwgX25vZGUsIG5vZGUyLCBfaXNEaXJlY3RlZCk7XG4gICAgcmV0dXJuIHJlbDtcbiAgfVxuXG4gIGFkZFNpbXBsZVJlbGF0aW9uKF9yZWxhdGlvblR5cGUsIF9ub2RlLCBfZWxlbWVudCwgX2lzRGlyZWN0ZWQpIHtcbiAgICBsZXQgbm9kZTIgPSB0aGlzLmFkZE5vZGUoX2VsZW1lbnQpO1xuICAgIGxldCByZWwgPSBuZXcgU3BpbmFsUmVsYXRpb24oX3JlbGF0aW9uVHlwZSwgX25vZGUsIG5vZGUyLCBfaXNEaXJlY3RlZCk7XG4gICAgcmV0dXJuIHJlbDtcbiAgfVxuXG4gIGFkZFJlbGF0aW9uKF9yZWxhdGlvbikge1xuICAgIGlmIChfcmVsYXRpb24uaXNEaXJlY3RlZC5nZXQoKSkge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IF9yZWxhdGlvbi5ub2RlTGlzdDEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBfcmVsYXRpb24ubm9kZUxpc3QxW2luZGV4XTtcbiAgICAgICAgbm9kZS5hZGREaXJlY3RlZFJlbGF0aW9uUGFyZW50KF9yZWxhdGlvbik7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgX3JlbGF0aW9uLm5vZGVMaXN0Mi5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IF9yZWxhdGlvbi5ub2RlTGlzdDJbaW5kZXhdO1xuICAgICAgICBub2RlLmFkZERpcmVjdGVkUmVsYXRpb25DaGlsZChfcmVsYXRpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgX3JlbGF0aW9uLm5vZGVMaXN0MS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IF9yZWxhdGlvbi5ub2RlTGlzdDFbaW5kZXhdO1xuICAgICAgICBub2RlLmFkZE5vbkRpcmVjdGVkUmVsYXRpb24oX3JlbGF0aW9uKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBfcmVsYXRpb24ubm9kZUxpc3QyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBub2RlID0gX3JlbGF0aW9uLm5vZGVMaXN0MltpbmRleF07XG4gICAgICAgIG5vZGUuYWRkTm9uRGlyZWN0ZWRSZWxhdGlvbihfcmVsYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jbGFzc2lmeVJlbGF0aW9uKF9yZWxhdGlvbik7XG4gIH1cblxuICBhZGRSZWxhdGlvbnMoX3JlbGF0aW9ucykge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBfcmVsYXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcmVsYXRpb24gPSBfcmVsYXRpb25zW2luZGV4XTtcbiAgICAgIHRoaXMuYWRkUmVsYXRpb24ocmVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIF9jbGFzc2lmeVJlbGF0aW9uKF9yZWxhdGlvbikge1xuICAgIHRoaXMucmVsYXRpb25MaXN0LmxvYWQocmVsYXRpb25MaXN0ID0+IHtcbiAgICAgIHJlbGF0aW9uTGlzdC5wdXNoKF9yZWxhdGlvbik7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucmVsYXRpb25MaXN0QnlUeXBlW19yZWxhdGlvbi50eXBlLmdldCgpXSkge1xuICAgICAgdGhpcy5yZWxhdGlvbkxpc3RCeVR5cGVbX3JlbGF0aW9uLnR5cGUuZ2V0KCldLmxvYWQocmVsYXRpb25MaXN0T2ZUeXBlID0+IHtcbiAgICAgICAgcmVsYXRpb25MaXN0T2ZUeXBlLnB1c2goX3JlbGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVsYXRpb25MaXN0T2ZUeXBlID0gbmV3IExzdCgpO1xuICAgICAgcmVsYXRpb25MaXN0T2ZUeXBlLnB1c2goX3JlbGF0aW9uKTtcbiAgICAgIHRoaXMucmVsYXRpb25MaXN0QnlUeXBlLmFkZF9hdHRyKHtcbiAgICAgICAgW19yZWxhdGlvbi50eXBlLmdldCgpXTogbmV3IFB0cihyZWxhdGlvbkxpc3RPZlR5cGUpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfY2xhc3NpZnlSZWxhdGlvbnMoX3JlbGF0aW9ucykge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBfcmVsYXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdGhpcy5jbGFzc1JlbGF0aW9uKF9yZWxhdGlvbnNbaW5kZXhdKTtcbiAgICB9XG4gIH1cblxuICBfYWRkTm90RXhpc3RpbmdOb2Rlc0Zyb21MaXN0KF9saXN0KSB7XG4gICAgdGhpcy5ub2RlTGlzdC5sb2FkKG5vZGVMaXN0ID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX2xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSBfbGlzdFtpXTtcbiAgICAgICAgaWYgKCFVdGlsaXRpZXMuY29udGFpbnMobm9kZUxpc3QsIG5vZGUpKSB7XG4gICAgICAgICAgdGhpcy5jbGFzc2lmeU5vZGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9hZGROb3RFeGlzdGluZ05vZGVzRnJvbVJlbGF0aW9uKF9yZWxhdGlvbikge1xuICAgIHRoaXMuX2FkZE5vdEV4aXN0aW5nTm9kZXNGcm9tTGlzdChfcmVsYXRpb24ubm9kZUxpc3QxKTtcbiAgICB0aGlzLl9hZGROb3RFeGlzdGluZ05vZGVzRnJvbUxpc3QoX3JlbGF0aW9uLm5vZGVMaXN0Mik7XG4gIH1cblxuICBhZGRDb250ZXh0KF9uYW1lLCBfdXNlZFJlbGF0aW9ucywgX3N0YXJ0aW5nTm9kZSwgX3VzZWRHcmFwaCkge1xuICAgIGxldCBjb250ZXh0ID0gbmV3IFNwaW5hbENvbnRleHQoX25hbWUsIF91c2VkUmVsYXRpb25zLCBfc3RhcnRpbmdOb2RlLFxuICAgICAgX3VzZWRHcmFwaClcbiAgICB0aGlzLmNvbnRleHRMaXN0LnB1c2goY29udGV4dClcbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxufVxuXG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbR3JhcGhdKTsiXX0=